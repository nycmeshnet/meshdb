# Default values for meshdb.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

pg:
  dbname: meshdb
  user: meshdb
  user_ro: meshdb_ro
  port: "5432"
  pvc_name: "meshdb-postgres-encyrpted-pvc"
  pvc_size: "20Gi"
  liveness_probe: "true"
  podSecurityContext: {}
  # fsGroup: 2000
  securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000
  image:
    repository: docker.io/postgres
    # 15-bookworm
    digest: sha256:8f6fbd24a12304d2adc332a2162ee9ff9d6044045a0b07f94d6e53e73125e11c
    pullPolicy: IfNotPresent
  resources:
    limits:
      cpu: 1
      memory: 1Gi
    requests:
      cpu: 1
      memory: 256Mi
  nodeSelector: {}
  affinity: {}
  tolerations: []

meshweb:
  port: 8081
  enable_debug: "False"
  disable_profiling: "True"
  disable_pano_edits: "True"
  static_pvc_name: "meshdb-static-pvc"
  static_pvc_size: "1Gi"
  liveness_probe: "true"
  readiness_probe: "true"
  startup_probe: "true"
  image:
    repository: docker.io/willnilges/meshdb
    tag: main
    pullPolicy: IfNotPresent
  podSecurityContext: {}
  securityContext: {}
  resources:
    limits:
      cpu: "1"
      memory: 2Gi
    requests:
      cpu: 384m
      memory: 1Gi
  nodeSelector: {}
  affinity: {}
  tolerations: []

nginx:
  port: 80
  podSecurityContext: {}
  securityContext: {}
  resources:
    limits:
      cpu: 250m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 30Mi
  image:
    repository: docker.io/nginx
    # latest
    digest: sha256:c15da6c91de8d2f436196f3a768483ad32c258ed4e1beb3d367a27ed67253e66
    pullPolicy: IfNotPresent
  nodeSelector: {}
  affinity: {}
  tolerations: []

ingress:
  enabled: true
  targetService: meshdb-nginx # Testing this out
  className: "traefik"
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: db.nycmesh.net # This will get overridden. Set Values.ingress.hosts[0].host
      paths:
        - path: /
          pathType: Prefix 
  tls: []

uisp:
  url: "https://uisp.mesh.nycmesh.net/nms"

redis:
  liveness_probe: "true"
  port: 6379
  podSecurityContext: {}
  securityContext: {}
  resources:
    limits:
      cpu: 250m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
  image:
    repository: docker.io/redis
    # latest
    digest: sha256:a4b90e7079b67c41bdf4ca6f9d87197079e4c1c3273b7f489a74f2687d85a05e
    pullPolicy: IfNotPresent
  nodeSelector: {}
  affinity: {}
  tolerations: []

pelias:
  port: 3000
  podSecurityContext: {}
  securityContext: {}
  resources:
    limits:
     cpu: 250m
     memory: 1536Mi
    requests:
      cpu: 250m
      memory: 512Mi
  image:
    repository: docker.io/pelias/parser
    # v3.1.0
    digest: sha256:458fe3ae873414064ac15a0702c348b641bcbbde3dba39a492abdff54e8b5891
    pullPolicy: IfNotPresent
  nodeSelector: {}
  affinity: {}
  tolerations: []

imageCredentials:
  registry: docker.io

nameOverride: ""
fullnameOverride: "meshdb"

#serviceAccount:
#  # Specifies whether a service account should be created
#  create: true
#  # Automatically mount a ServiceAccount's API credentials?
#  automount: true
#  # Annotations to add to the service account
#  annotations: {}
#  # The name of the service account to use.
#  # If not set and create is true, a name is generated using the fullname template
#  name: ""

podAnnotations: {}
podLabels: {}

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

revisionHistoryLimit: 4

celery:
  # This pod should NOT be scaled higher.
  replicaCount: 1

  image:
    repository: docker.io/willnilges/meshdb
    pullPolicy: IfNotPresent
    tag: "main"

  nameOverride: ""
  fullnameOverride: ""

  serviceAccount:
    create: false

  podSecurityContext:
    seccompProfile:
      type: RuntimeDefault
  securityContext: {}

  ingress:
    enabled: false

  resources:
    limits:
      cpu: 1
      memory: 2Gi
    requests:
      cpu: 100m
      memory: 512Mi

  containers:
    - name: celery-worker
      command:
        - sh
        - -c
        - ./scripts/celery/celery_worker.sh
      livenessProbe:
        exec:
          # bash is needed to replace the environment variable
          command:
            - "sh"
            - "-c"
            - "python scripts/celery/probes/celery_liveness.py"
        initialDelaySeconds: 60  # startup takes some time
        periodSeconds: 60  # default is quite often and celery uses a lot cpu/ram then.
        timeoutSeconds: 10  # default is too low
      readinessProbe:
        exec:
          # bash is needed to replace the environment variable
          command:
            - "sh"
            - "-c"
            - "python scripts/celery/probes/celery_readiness.py"
        initialDelaySeconds: 60
        periodSeconds: 60
        timeoutSeconds: 10
    - name: celery-beat
      command: 
        - sh
        - -c
        - ./scripts/celery/celery_beat.sh
      livenessProbe:
        exec:
          # bash is needed to replace the environment variable
          command:
            - "sh"
            - "-c"
            - "python scripts/celery/probes/celery_beat_liveness.py"
        initialDelaySeconds: 60
        periodSeconds: 60
        timeoutSeconds: 10
      readinessProbe:
        exec:
          # bash is needed to replace the environment variable
          command:
            - "sh"
            - "-c"
            - "python scripts/celery/probes/celery_beat_readiness.py"
        initialDelaySeconds: 60
        periodSeconds: 60
        timeoutSeconds: 10
