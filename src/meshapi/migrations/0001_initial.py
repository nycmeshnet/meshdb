# Generated by Django 4.2.13 on 2024-10-07 00:55

import uuid

import django.contrib.postgres.fields
import django.core.validators
import django.db.models.deletion
import django_jsonform.models.fields
import simple_history.models
from django.conf import settings
from django.db import migrations, models

import meshapi.models.util.auto_incrementing_integer_field
import meshapi.validation


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Permission",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
            ],
            options={
                "permissions": (
                    ("maintenance_mode", "Can toggle maintenance mode"),
                    ("explorer_access", "Can access SQL Explorer"),
                ),
                "managed": False,
                "default_permissions": (),
            },
        ),
        migrations.CreateModel(
            name="Building",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                (
                    "bin",
                    models.IntegerField(
                        blank=True,
                        help_text="NYC DOB Identifier for the structure containing this building",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "street_address",
                    models.CharField(
                        blank=True,
                        help_text="Line 1 only of the address of this building: i.e. <house num> <street>",
                        null=True,
                    ),
                ),
                (
                    "city",
                    models.CharField(
                        blank=True,
                        help_text='The name of the borough this building is in for buildings within NYC, "New York" for Manhattan to match street addresses. The actual city name for anything outside NYC',
                        null=True,
                    ),
                ),
                (
                    "state",
                    models.CharField(
                        blank=True,
                        help_text='The 2 letter abreviation of the US State this building is contained within, e.g. "NY" or "NJ"',
                        null=True,
                    ),
                ),
                (
                    "zip_code",
                    models.CharField(
                        blank=True, help_text="The five digit ZIP code this building is contained within", null=True
                    ),
                ),
                (
                    "address_truth_sources",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(
                            choices=[
                                ("OSMNominatim", "OSMNominatim"),
                                ("OSMNominatimZIPOnly", "OSMNominatimZIPOnly"),
                                ("NYCPlanningLabs", "NYCPlanningLabs"),
                                ("PeliasStringParsing", "PeliasStringParsing"),
                                ("ReverseGeocodeFromCoordinates", "ReverseGeocodeFromCoordinates"),
                                ("HumanEntry", "HumanEntry"),
                            ]
                        ),
                        help_text="A list of strings that answers the question: How was the content of the street address, city, state, and ZIP fields determined? This is useful in understanding the level of validation applied to spreadsheet imported data. Possible values are: OSMNominatim, OSMNominatimZIPOnly, NYCPlanningLabs, PeliasStringParsing, ReverseGeocodeFromCoordinates, HumanEntry. Check the import script for details",
                        size=None,
                    ),
                ),
                ("latitude", models.FloatField(help_text="Building latitude in decimal degrees")),
                ("longitude", models.FloatField(help_text="Building longitude in decimal degrees")),
                (
                    "altitude",
                    models.FloatField(
                        blank=True,
                        help_text='Building rooftop altitude in "absolute" meters above mean sea level',
                        null=True,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="A free-form text description of this building, to track any additional information. For Buidings imported from the spreadsheet, this starts with a formatted block of information about the import process and original spreadsheet data. However this structure can be changed by admins at any time and should not be relied on by automated systems. ",
                        null=True,
                    ),
                ),
                (
                    "panoramas",
                    django_jsonform.models.fields.ArrayField(
                        base_field=models.URLField(),
                        blank=True,
                        default=list,
                        help_text="Panoramas taken from the roof of this Building",
                        null=True,
                        size=None,
                    ),
                ),
            ],
            options={
                "ordering": ["id"],
            },
        ),
        migrations.CreateModel(
            name="Device",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="The name of this device, usually configured as the hostname in the device firmware, usually in the format nycmesh-xxxx-yyyy-zzzz, where xxxx is the network number for the node this device is located at, yyyy is the type of the device, and zzzz is the network number of the other side of the link this device creates (if applicable)",
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[("Inactive", "Inactive"), ("Active", "Active"), ("Potential", "Potential")],
                        help_text="The current status of this device",
                    ),
                ),
                (
                    "install_date",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text="The date this device first became active on the mesh",
                        null=True,
                    ),
                ),
                (
                    "abandon_date",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text="The this device was abandoned, unplugged, or removed from service",
                        null=True,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        default=None,
                        help_text="A free-form text description of this Device, to track any additional information. For imported Devices, this starts with a formatted block of information about the import processand original data. However this structure can be changed by admins at any time and should not be relied onby automated systems. ",
                        null=True,
                    ),
                ),
                (
                    "uisp_id",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="The UUID used to indentify this device in UISP (if applicable)",
                        null=True,
                    ),
                ),
            ],
            options={
                "ordering": [models.OrderBy(models.F("install_date"), descending=True, nulls_last=True)],
            },
        ),
        migrations.CreateModel(
            name="HistoricalBuilding",
            fields=[
                ("id", models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                (
                    "bin",
                    models.IntegerField(
                        blank=True,
                        help_text="NYC DOB Identifier for the structure containing this building",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "street_address",
                    models.CharField(
                        blank=True,
                        help_text="Line 1 only of the address of this building: i.e. <house num> <street>",
                        null=True,
                    ),
                ),
                (
                    "city",
                    models.CharField(
                        blank=True,
                        help_text='The name of the borough this building is in for buildings within NYC, "New York" for Manhattan to match street addresses. The actual city name for anything outside NYC',
                        null=True,
                    ),
                ),
                (
                    "state",
                    models.CharField(
                        blank=True,
                        help_text='The 2 letter abreviation of the US State this building is contained within, e.g. "NY" or "NJ"',
                        null=True,
                    ),
                ),
                (
                    "zip_code",
                    models.CharField(
                        blank=True, help_text="The five digit ZIP code this building is contained within", null=True
                    ),
                ),
                (
                    "address_truth_sources",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(
                            choices=[
                                ("OSMNominatim", "OSMNominatim"),
                                ("OSMNominatimZIPOnly", "OSMNominatimZIPOnly"),
                                ("NYCPlanningLabs", "NYCPlanningLabs"),
                                ("PeliasStringParsing", "PeliasStringParsing"),
                                ("ReverseGeocodeFromCoordinates", "ReverseGeocodeFromCoordinates"),
                                ("HumanEntry", "HumanEntry"),
                            ]
                        ),
                        help_text="A list of strings that answers the question: How was the content of the street address, city, state, and ZIP fields determined? This is useful in understanding the level of validation applied to spreadsheet imported data. Possible values are: OSMNominatim, OSMNominatimZIPOnly, NYCPlanningLabs, PeliasStringParsing, ReverseGeocodeFromCoordinates, HumanEntry. Check the import script for details",
                        size=None,
                    ),
                ),
                ("latitude", models.FloatField(help_text="Building latitude in decimal degrees")),
                ("longitude", models.FloatField(help_text="Building longitude in decimal degrees")),
                (
                    "altitude",
                    models.FloatField(
                        blank=True,
                        help_text='Building rooftop altitude in "absolute" meters above mean sea level',
                        null=True,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="A free-form text description of this building, to track any additional information. For Buidings imported from the spreadsheet, this starts with a formatted block of information about the import process and original spreadsheet data. However this structure can be changed by admins at any time and should not be relied on by automated systems. ",
                        null=True,
                    ),
                ),
                (
                    "panoramas",
                    django_jsonform.models.fields.ArrayField(
                        base_field=models.URLField(),
                        blank=True,
                        default=list,
                        help_text="Panoramas taken from the roof of this Building",
                        null=True,
                        size=None,
                    ),
                ),
                ("history_id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical building",
                "verbose_name_plural": "historical buildings",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="Member",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("name", models.CharField(help_text='Member full name in the format: "First Last"')),
                (
                    "primary_email_address",
                    models.EmailField(
                        blank=True,
                        help_text="Primary email address used to contact the member",
                        max_length=254,
                        null=True,
                    ),
                ),
                (
                    "stripe_email_address",
                    models.EmailField(
                        blank=True,
                        default=None,
                        help_text="Email address used by the member to donate via Stripe, if different to their primary email",
                        max_length=254,
                        null=True,
                    ),
                ),
                (
                    "additional_email_addresses",
                    django_jsonform.models.fields.ArrayField(
                        base_field=models.EmailField(max_length=254),
                        blank=True,
                        default=list,
                        help_text="Any additional email addresses associated with this member",
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="A primary contact phone number for this member",
                        null=True,
                        validators=[meshapi.validation.validate_phone_number_field],
                    ),
                ),
                (
                    "additional_phone_numbers",
                    django_jsonform.models.fields.ArrayField(
                        base_field=models.CharField(),
                        blank=True,
                        default=list,
                        help_text="Any additional phone numbers used by this member",
                        null=True,
                        size=None,
                        validators=[meshapi.validation.validate_multi_phone_number_field],
                    ),
                ),
                (
                    "slack_handle",
                    models.CharField(blank=True, default=None, help_text="The member's slack handle", null=True),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        default=None,
                        help_text="A free-form text description of how to contact this member, to track any additional information. For Members imported from the spreadsheet, this starts with a formatted block of information about the import process and original spreadsheet data. However this structure can be changed by admins at any time and should not be relied on by automated systems. ",
                        null=True,
                    ),
                ),
            ],
            options={
                "ordering": ["id"],
            },
        ),
        migrations.CreateModel(
            name="Node",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                (
                    "network_number",
                    models.IntegerField(
                        blank=True, null=True, unique=True, validators=[django.core.validators.MaxValueValidator(8192)]
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="The colloquial name of this node used among mesh volunteers, if applicable",
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[("Inactive", "Inactive"), ("Active", "Active"), ("Planned", "Planned")],
                        help_text="The current status of this Node",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("Standard", "Standard"),
                            ("Hub", "Hub"),
                            ("Supernode", "Supernode"),
                            ("POP", "Pop"),
                            ("AP", "Ap"),
                            ("Remote", "Remote"),
                        ],
                        default="Standard",
                        help_text="The type of node this is, controls the icon used on the network map",
                    ),
                ),
                (
                    "latitude",
                    models.FloatField(
                        help_text="Approximate Node latitude in decimal degrees (this will match one of the attached Building objects in most cases, but has been manually moved around in some cases to more accurately reflect node location)"
                    ),
                ),
                (
                    "longitude",
                    models.FloatField(
                        help_text="Approximate Node longitude in decimal degrees (this will match one of the attached Building objects in most cases, but has been manually moved around in some cases to more accurately reflect node location)"
                    ),
                ),
                (
                    "altitude",
                    models.FloatField(
                        blank=True,
                        help_text='Approximate Node altitude in "absolute" meters above mean sea level (this will match one of the attached Building objects in most cases, but has been manually moved around in some cases to more accurately reflect node location)',
                        null=True,
                    ),
                ),
                (
                    "install_date",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text="The date the first Install or Device associated with this Node became active on the mesh",
                        null=True,
                    ),
                ),
                (
                    "abandon_date",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text="The date the last Install or Device associated with this Node was abandoned, unplugged, or removed from service",
                        null=True,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="A free-form text description of this Node, to track any additional information. For Nodes imported from the spreadsheet, this starts with a formatted block of information about the import process and original spreadsheet data. However this structure can be changed by admins at any time and should not be relied on by automated systems. ",
                        null=True,
                    ),
                ),
            ],
            options={
                "ordering": ["network_number"],
            },
        ),
        migrations.CreateModel(
            name="AccessPoint",
            fields=[
                (
                    "device_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="meshapi.device",
                    ),
                ),
                (
                    "latitude",
                    models.FloatField(
                        help_text="Approximate AP latitude in decimal degrees (this will match the attached Node object in most cases, but has been manually moved around in some cases to more accurately reflect the device location)"
                    ),
                ),
                (
                    "longitude",
                    models.FloatField(
                        help_text="Approximate AP longitude in decimal degrees (this will match the attached Node object in most cases, but has been manually moved around in some cases to more accurately reflect the device location)"
                    ),
                ),
                (
                    "altitude",
                    models.FloatField(
                        blank=True,
                        help_text='Approximate AP altitude in "absolute" meters above mean sea level (this will match the attached Node object in most cases, but has been manually moved around in some cases to more accurately reflect the device location)',
                        null=True,
                    ),
                ),
            ],
            bases=("meshapi.device",),
        ),
        migrations.CreateModel(
            name="Sector",
            fields=[
                (
                    "device_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="meshapi.device",
                    ),
                ),
                (
                    "radius",
                    models.FloatField(
                        help_text="The radius to display this sector on the map (in km)",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "azimuth",
                    models.IntegerField(
                        help_text="The compass heading that this sector is pointed towards",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(360),
                        ],
                    ),
                ),
                (
                    "width",
                    models.IntegerField(
                        help_text="The approximate width of the beam this sector produces",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(360),
                        ],
                    ),
                ),
            ],
            bases=("meshapi.device",),
        ),
        migrations.CreateModel(
            name="LOS",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                (
                    "analysis_date",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text="The date we conducted the analysis that concluded this LOS exists. Important since new buildings might have been built which block the LOS after this date",
                        null=True,
                    ),
                ),
                (
                    "source",
                    models.CharField(
                        choices=[("Human Annotated", "Human Annotated"), ("Existing Link", "Existing Link")],
                        help_text="The source of information that tells us this LOS exists",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        default=None,
                        help_text="A free-form text description of this LOS, to track any additional information.",
                        null=True,
                    ),
                ),
                (
                    "from_building",
                    models.ForeignKey(
                        help_text="The building on one side of this LOS, from/to are not meaningful except to disambiguate",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="los_from",
                        to="meshapi.building",
                    ),
                ),
                (
                    "to_building",
                    models.ForeignKey(
                        help_text="The building on one side of this LOS, from/to are not meaningful except to disambiguate",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="los_to",
                        to="meshapi.building",
                    ),
                ),
            ],
            options={
                "verbose_name": "LOS",
                "verbose_name_plural": "LOSes",
                "ordering": ["id"],
            },
        ),
        migrations.CreateModel(
            name="Link",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                (
                    "status",
                    models.CharField(
                        choices=[("Inactive", "Inactive"), ("Planned", "Planned"), ("Active", "Active")],
                        help_text="The current status of this link",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("5 GHz", "Five Ghz"),
                            ("24 GHz", "Twentyfour Ghz"),
                            ("60 GHz", "Sixty Ghz"),
                            ("70-80 GHz", "Seventy Eighty Ghz"),
                            ("VPN", "Vpn"),
                            ("Fiber", "Fiber"),
                            ("Ethernet", "Ethernet"),
                        ],
                        default=None,
                        help_text="The technology used for this link 5Ghz, 60Ghz, fiber, etc.",
                        null=True,
                    ),
                ),
                (
                    "install_date",
                    models.DateField(blank=True, default=None, help_text="The date this link was created", null=True),
                ),
                (
                    "abandon_date",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text="The date this link was powered off, disassembled, or abandoned",
                        null=True,
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text='A short description of "where to where" this link connects in human readable language',
                        null=True,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        default=None,
                        help_text="A free-form text description of this Link, to track any additional information.",
                        null=True,
                    ),
                ),
                (
                    "uisp_id",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="The UUID used to indentify this link in UISP (if applicable)",
                        null=True,
                    ),
                ),
                (
                    "from_device",
                    models.ForeignKey(
                        help_text="The device on one side of this network link, from/to are not meaningful except to disambiguate",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="links_from",
                        to="meshapi.device",
                    ),
                ),
                (
                    "to_device",
                    models.ForeignKey(
                        help_text="The device on one side of this network link, from/to are not meaningful except to disambiguate",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="links_to",
                        to="meshapi.device",
                    ),
                ),
            ],
            options={
                "ordering": ["id"],
            },
        ),
        migrations.CreateModel(
            name="Install",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                (
                    "install_number",
                    meshapi.models.util.auto_incrementing_integer_field.AutoIncrementingIntegerField(
                        editable=False, unique=True
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("Request Received", "Request Received"),
                            ("Pending", "Pending"),
                            ("Blocked", "Blocked"),
                            ("Active", "Active"),
                            ("Inactive", "Inactive"),
                            ("Closed", "Closed"),
                            ("NN Reassigned", "Nn Reassigned"),
                        ],
                        help_text="The current status of this install",
                    ),
                ),
                (
                    "ticket_number",
                    models.CharField(
                        blank=True,
                        help_text="The ticket number of the OSTicket used to track communications with the member about this install. Note that although this appears to be an integer, it is not. Leading zeros are important, so this should be stored as a string at all times",
                        null=True,
                    ),
                ),
                ("request_date", models.DateField(help_text="The date that this install request was received")),
                (
                    "install_date",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text="The date this install was completed and deployed to the mesh",
                        null=True,
                    ),
                ),
                (
                    "abandon_date",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text="The date this install was abandoned, unplugged, or disassembled",
                        null=True,
                    ),
                ),
                (
                    "unit",
                    models.CharField(
                        blank=True, default=None, help_text="Line 2 of this install's mailing address", null=True
                    ),
                ),
                (
                    "roof_access",
                    models.BooleanField(
                        default=False,
                        help_text="True if the member indicated they had access to the roof when they submitted the join form",
                    ),
                ),
                (
                    "referral",
                    models.TextField(
                        blank=True,
                        default=None,
                        help_text='The "How did you hear about us?" information provided to us when the member submitted the join form',
                        null=True,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        default=None,
                        help_text="A free-form text description of this Install, to track any additional information. For Installs imported from the spreadsheet, this starts with a formatted block of information about the import process and original spreadsheet data. However this structure can be changed by admins at any time and should not be relied on by automated systems. ",
                        null=True,
                    ),
                ),
                (
                    "diy",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text="Was this install conducted by the member themselves? If not, it was done by a volunteer installer on their behalf",
                        null=True,
                        verbose_name="Is DIY?",
                    ),
                ),
                (
                    "building",
                    models.ForeignKey(
                        help_text="The building where the install is located. In the case of a structure with multiple buildings, this will be the building whose address makes sense for this install's unit.",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="installs",
                        to="meshapi.building",
                    ),
                ),
                (
                    "member",
                    models.ForeignKey(
                        help_text="The member this install is associated with",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="installs",
                        to="meshapi.member",
                    ),
                ),
                (
                    "node",
                    models.ForeignKey(
                        blank=True,
                        help_text="The node this install is associated with. This node's network_number field corresponds to the static IP address and OSPF ID of the router this install utilizes, the DHCP range it receives an address from, etc.",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="installs",
                        to="meshapi.node",
                    ),
                ),
            ],
            options={
                "ordering": ["-install_number"],
                "permissions": [
                    ("assign_nn", "Can assign an NN to install"),
                    ("update_panoramas", "Can update panoramas"),
                ],
            },
        ),
        migrations.CreateModel(
            name="HistoricalSector",
            fields=[
                (
                    "device_ptr",
                    models.ForeignKey(
                        auto_created=True,
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        parent_link=True,
                        related_name="+",
                        to="meshapi.device",
                    ),
                ),
                ("id", models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="The name of this device, usually configured as the hostname in the device firmware, usually in the format nycmesh-xxxx-yyyy-zzzz, where xxxx is the network number for the node this device is located at, yyyy is the type of the device, and zzzz is the network number of the other side of the link this device creates (if applicable)",
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[("Inactive", "Inactive"), ("Active", "Active"), ("Potential", "Potential")],
                        help_text="The current status of this device",
                    ),
                ),
                (
                    "install_date",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text="The date this device first became active on the mesh",
                        null=True,
                    ),
                ),
                (
                    "abandon_date",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text="The this device was abandoned, unplugged, or removed from service",
                        null=True,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        default=None,
                        help_text="A free-form text description of this Device, to track any additional information. For imported Devices, this starts with a formatted block of information about the import processand original data. However this structure can be changed by admins at any time and should not be relied onby automated systems. ",
                        null=True,
                    ),
                ),
                (
                    "uisp_id",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="The UUID used to indentify this device in UISP (if applicable)",
                        null=True,
                    ),
                ),
                (
                    "radius",
                    models.FloatField(
                        help_text="The radius to display this sector on the map (in km)",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "azimuth",
                    models.IntegerField(
                        help_text="The compass heading that this sector is pointed towards",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(360),
                        ],
                    ),
                ),
                (
                    "width",
                    models.IntegerField(
                        help_text="The approximate width of the beam this sector produces",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(360),
                        ],
                    ),
                ),
                ("history_id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "node",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The logical node this Device is located within. This node's network_number field corresponds to the static IP address and OSPF ID of this device or the DHCP range it receives an address from. The network number is also usually found in the device name",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="meshapi.node",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical sector",
                "verbose_name_plural": "historical sectors",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalNode",
            fields=[
                ("id", models.UUIDField(db_index=True, default=uuid.uuid4)),
                (
                    "network_number",
                    models.IntegerField(
                        blank=True,
                        db_index=True,
                        null=True,
                        validators=[django.core.validators.MaxValueValidator(8192)],
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="The colloquial name of this node used among mesh volunteers, if applicable",
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[("Inactive", "Inactive"), ("Active", "Active"), ("Planned", "Planned")],
                        help_text="The current status of this Node",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("Standard", "Standard"),
                            ("Hub", "Hub"),
                            ("Supernode", "Supernode"),
                            ("POP", "Pop"),
                            ("AP", "Ap"),
                            ("Remote", "Remote"),
                        ],
                        default="Standard",
                        help_text="The type of node this is, controls the icon used on the network map",
                    ),
                ),
                (
                    "latitude",
                    models.FloatField(
                        help_text="Approximate Node latitude in decimal degrees (this will match one of the attached Building objects in most cases, but has been manually moved around in some cases to more accurately reflect node location)"
                    ),
                ),
                (
                    "longitude",
                    models.FloatField(
                        help_text="Approximate Node longitude in decimal degrees (this will match one of the attached Building objects in most cases, but has been manually moved around in some cases to more accurately reflect node location)"
                    ),
                ),
                (
                    "altitude",
                    models.FloatField(
                        blank=True,
                        help_text='Approximate Node altitude in "absolute" meters above mean sea level (this will match one of the attached Building objects in most cases, but has been manually moved around in some cases to more accurately reflect node location)',
                        null=True,
                    ),
                ),
                (
                    "install_date",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text="The date the first Install or Device associated with this Node became active on the mesh",
                        null=True,
                    ),
                ),
                (
                    "abandon_date",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text="The date the last Install or Device associated with this Node was abandoned, unplugged, or removed from service",
                        null=True,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="A free-form text description of this Node, to track any additional information. For Nodes imported from the spreadsheet, this starts with a formatted block of information about the import process and original spreadsheet data. However this structure can be changed by admins at any time and should not be relied on by automated systems. ",
                        null=True,
                    ),
                ),
                ("history_id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical node",
                "verbose_name_plural": "historical nodes",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalMember",
            fields=[
                ("id", models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ("name", models.CharField(help_text='Member full name in the format: "First Last"')),
                (
                    "primary_email_address",
                    models.EmailField(
                        blank=True,
                        help_text="Primary email address used to contact the member",
                        max_length=254,
                        null=True,
                    ),
                ),
                (
                    "stripe_email_address",
                    models.EmailField(
                        blank=True,
                        default=None,
                        help_text="Email address used by the member to donate via Stripe, if different to their primary email",
                        max_length=254,
                        null=True,
                    ),
                ),
                (
                    "additional_email_addresses",
                    django_jsonform.models.fields.ArrayField(
                        base_field=models.EmailField(max_length=254),
                        blank=True,
                        default=list,
                        help_text="Any additional email addresses associated with this member",
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="A primary contact phone number for this member",
                        null=True,
                        validators=[meshapi.validation.validate_phone_number_field],
                    ),
                ),
                (
                    "additional_phone_numbers",
                    django_jsonform.models.fields.ArrayField(
                        base_field=models.CharField(),
                        blank=True,
                        default=list,
                        help_text="Any additional phone numbers used by this member",
                        null=True,
                        size=None,
                        validators=[meshapi.validation.validate_multi_phone_number_field],
                    ),
                ),
                (
                    "slack_handle",
                    models.CharField(blank=True, default=None, help_text="The member's slack handle", null=True),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        default=None,
                        help_text="A free-form text description of how to contact this member, to track any additional information. For Members imported from the spreadsheet, this starts with a formatted block of information about the import process and original spreadsheet data. However this structure can be changed by admins at any time and should not be relied on by automated systems. ",
                        null=True,
                    ),
                ),
                ("history_id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical member",
                "verbose_name_plural": "historical members",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalLOS",
            fields=[
                ("id", models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                (
                    "analysis_date",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text="The date we conducted the analysis that concluded this LOS exists. Important since new buildings might have been built which block the LOS after this date",
                        null=True,
                    ),
                ),
                (
                    "source",
                    models.CharField(
                        choices=[("Human Annotated", "Human Annotated"), ("Existing Link", "Existing Link")],
                        help_text="The source of information that tells us this LOS exists",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        default=None,
                        help_text="A free-form text description of this LOS, to track any additional information.",
                        null=True,
                    ),
                ),
                ("history_id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1),
                ),
                (
                    "from_building",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The building on one side of this LOS, from/to are not meaningful except to disambiguate",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="meshapi.building",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "to_building",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The building on one side of this LOS, from/to are not meaningful except to disambiguate",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="meshapi.building",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical LOS",
                "verbose_name_plural": "historical LOSes",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalLink",
            fields=[
                ("id", models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                (
                    "status",
                    models.CharField(
                        choices=[("Inactive", "Inactive"), ("Planned", "Planned"), ("Active", "Active")],
                        help_text="The current status of this link",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("5 GHz", "Five Ghz"),
                            ("24 GHz", "Twentyfour Ghz"),
                            ("60 GHz", "Sixty Ghz"),
                            ("70-80 GHz", "Seventy Eighty Ghz"),
                            ("VPN", "Vpn"),
                            ("Fiber", "Fiber"),
                            ("Ethernet", "Ethernet"),
                        ],
                        default=None,
                        help_text="The technology used for this link 5Ghz, 60Ghz, fiber, etc.",
                        null=True,
                    ),
                ),
                (
                    "install_date",
                    models.DateField(blank=True, default=None, help_text="The date this link was created", null=True),
                ),
                (
                    "abandon_date",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text="The date this link was powered off, disassembled, or abandoned",
                        null=True,
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text='A short description of "where to where" this link connects in human readable language',
                        null=True,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        default=None,
                        help_text="A free-form text description of this Link, to track any additional information.",
                        null=True,
                    ),
                ),
                (
                    "uisp_id",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="The UUID used to indentify this link in UISP (if applicable)",
                        null=True,
                    ),
                ),
                ("history_id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1),
                ),
                (
                    "from_device",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The device on one side of this network link, from/to are not meaningful except to disambiguate",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="meshapi.device",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "to_device",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The device on one side of this network link, from/to are not meaningful except to disambiguate",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="meshapi.device",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical link",
                "verbose_name_plural": "historical links",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalInstall",
            fields=[
                ("id", models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                (
                    "install_number",
                    meshapi.models.util.auto_incrementing_integer_field.AutoIncrementingIntegerField(
                        db_index=True, editable=False
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("Request Received", "Request Received"),
                            ("Pending", "Pending"),
                            ("Blocked", "Blocked"),
                            ("Active", "Active"),
                            ("Inactive", "Inactive"),
                            ("Closed", "Closed"),
                            ("NN Reassigned", "Nn Reassigned"),
                        ],
                        help_text="The current status of this install",
                    ),
                ),
                (
                    "ticket_number",
                    models.CharField(
                        blank=True,
                        help_text="The ticket number of the OSTicket used to track communications with the member about this install. Note that although this appears to be an integer, it is not. Leading zeros are important, so this should be stored as a string at all times",
                        null=True,
                    ),
                ),
                ("request_date", models.DateField(help_text="The date that this install request was received")),
                (
                    "install_date",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text="The date this install was completed and deployed to the mesh",
                        null=True,
                    ),
                ),
                (
                    "abandon_date",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text="The date this install was abandoned, unplugged, or disassembled",
                        null=True,
                    ),
                ),
                (
                    "unit",
                    models.CharField(
                        blank=True, default=None, help_text="Line 2 of this install's mailing address", null=True
                    ),
                ),
                (
                    "roof_access",
                    models.BooleanField(
                        default=False,
                        help_text="True if the member indicated they had access to the roof when they submitted the join form",
                    ),
                ),
                (
                    "referral",
                    models.TextField(
                        blank=True,
                        default=None,
                        help_text='The "How did you hear about us?" information provided to us when the member submitted the join form',
                        null=True,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        default=None,
                        help_text="A free-form text description of this Install, to track any additional information. For Installs imported from the spreadsheet, this starts with a formatted block of information about the import process and original spreadsheet data. However this structure can be changed by admins at any time and should not be relied on by automated systems. ",
                        null=True,
                    ),
                ),
                (
                    "diy",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text="Was this install conducted by the member themselves? If not, it was done by a volunteer installer on their behalf",
                        null=True,
                        verbose_name="Is DIY?",
                    ),
                ),
                ("history_id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1),
                ),
                (
                    "building",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The building where the install is located. In the case of a structure with multiple buildings, this will be the building whose address makes sense for this install's unit.",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="meshapi.building",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "member",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The member this install is associated with",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="meshapi.member",
                    ),
                ),
                (
                    "node",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The node this install is associated with. This node's network_number field corresponds to the static IP address and OSPF ID of the router this install utilizes, the DHCP range it receives an address from, etc.",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="meshapi.node",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical install",
                "verbose_name_plural": "historical installs",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalDevice",
            fields=[
                ("id", models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="The name of this device, usually configured as the hostname in the device firmware, usually in the format nycmesh-xxxx-yyyy-zzzz, where xxxx is the network number for the node this device is located at, yyyy is the type of the device, and zzzz is the network number of the other side of the link this device creates (if applicable)",
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[("Inactive", "Inactive"), ("Active", "Active"), ("Potential", "Potential")],
                        help_text="The current status of this device",
                    ),
                ),
                (
                    "install_date",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text="The date this device first became active on the mesh",
                        null=True,
                    ),
                ),
                (
                    "abandon_date",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text="The this device was abandoned, unplugged, or removed from service",
                        null=True,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        default=None,
                        help_text="A free-form text description of this Device, to track any additional information. For imported Devices, this starts with a formatted block of information about the import processand original data. However this structure can be changed by admins at any time and should not be relied onby automated systems. ",
                        null=True,
                    ),
                ),
                (
                    "uisp_id",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="The UUID used to indentify this device in UISP (if applicable)",
                        null=True,
                    ),
                ),
                ("history_id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "node",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The logical node this Device is located within. This node's network_number field corresponds to the static IP address and OSPF ID of this device or the DHCP range it receives an address from. The network number is also usually found in the device name",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="meshapi.node",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical device",
                "verbose_name_plural": "historical devices",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalBuilding_nodes",
            fields=[
                ("id", models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name="ID")),
                (
                    "m2m_history_id",
                    models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False),
                ),
                (
                    "building",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        db_tablespace="",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="meshapi.building",
                    ),
                ),
                (
                    "history",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="meshapi.historicalbuilding",
                    ),
                ),
                (
                    "node",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        db_tablespace="",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="meshapi.node",
                    ),
                ),
            ],
            options={
                "verbose_name": "HistoricalBuilding_nodes",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddField(
            model_name="historicalbuilding",
            name="primary_node",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                help_text="The primary node for this Building, for cases where it has more than one. This is the node bearing the network number that the building is collquially referred to by volunteers and is usually the first NN held by any equipment on the building. If present, this must also be included in nodes",
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="meshapi.node",
            ),
        ),
        migrations.CreateModel(
            name="HistoricalAccessPoint",
            fields=[
                (
                    "device_ptr",
                    models.ForeignKey(
                        auto_created=True,
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        parent_link=True,
                        related_name="+",
                        to="meshapi.device",
                    ),
                ),
                ("id", models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="The name of this device, usually configured as the hostname in the device firmware, usually in the format nycmesh-xxxx-yyyy-zzzz, where xxxx is the network number for the node this device is located at, yyyy is the type of the device, and zzzz is the network number of the other side of the link this device creates (if applicable)",
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[("Inactive", "Inactive"), ("Active", "Active"), ("Potential", "Potential")],
                        help_text="The current status of this device",
                    ),
                ),
                (
                    "install_date",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text="The date this device first became active on the mesh",
                        null=True,
                    ),
                ),
                (
                    "abandon_date",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text="The this device was abandoned, unplugged, or removed from service",
                        null=True,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        default=None,
                        help_text="A free-form text description of this Device, to track any additional information. For imported Devices, this starts with a formatted block of information about the import processand original data. However this structure can be changed by admins at any time and should not be relied onby automated systems. ",
                        null=True,
                    ),
                ),
                (
                    "uisp_id",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="The UUID used to indentify this device in UISP (if applicable)",
                        null=True,
                    ),
                ),
                (
                    "latitude",
                    models.FloatField(
                        help_text="Approximate AP latitude in decimal degrees (this will match the attached Node object in most cases, but has been manually moved around in some cases to more accurately reflect the device location)"
                    ),
                ),
                (
                    "longitude",
                    models.FloatField(
                        help_text="Approximate AP longitude in decimal degrees (this will match the attached Node object in most cases, but has been manually moved around in some cases to more accurately reflect the device location)"
                    ),
                ),
                (
                    "altitude",
                    models.FloatField(
                        blank=True,
                        help_text='Approximate AP altitude in "absolute" meters above mean sea level (this will match the attached Node object in most cases, but has been manually moved around in some cases to more accurately reflect the device location)',
                        null=True,
                    ),
                ),
                ("history_id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "node",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The logical node this Device is located within. This node's network_number field corresponds to the static IP address and OSPF ID of this device or the DHCP range it receives an address from. The network number is also usually found in the device name",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="meshapi.node",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical access point",
                "verbose_name_plural": "historical access points",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddField(
            model_name="device",
            name="node",
            field=models.ForeignKey(
                help_text="The logical node this Device is located within. This node's network_number field corresponds to the static IP address and OSPF ID of this device or the DHCP range it receives an address from. The network number is also usually found in the device name",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="devices",
                to="meshapi.node",
            ),
        ),
        migrations.AddField(
            model_name="building",
            name="nodes",
            field=models.ManyToManyField(
                blank=True,
                help_text="All nodes located on the same structure (i.e. a discrete man-made place identified by the same BIN) that this Building is located within.",
                related_name="buildings",
                to="meshapi.node",
            ),
        ),
        migrations.AddField(
            model_name="building",
            name="primary_node",
            field=models.ForeignKey(
                blank=True,
                help_text="The primary node for this Building, for cases where it has more than one. This is the node bearing the network number that the building is collquially referred to by volunteers and is usually the first NN held by any equipment on the building. If present, this must also be included in nodes",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="+",
                to="meshapi.node",
            ),
        ),
    ]
